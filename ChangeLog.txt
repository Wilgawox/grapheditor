13/05/2010: Code review from Christophe
=======================================
GrarphEditor would be a standalone package.
Otherless developers from other projects will never use or extend it.

So we need to remove any references to OPenAlea.Core:
    - interfaces.py: 
        * why do we need to register these interface to OpenAlea?
        Interface in OpenAlea are only use to define the inputs of a node 
        and associate automagically a widgets to the node.
        => Use duck typing instead.
        * However, if you want to define a contract, please document at least
            - what the class represent
            - what are the output of the methods
            - what are their meaning
        See graph.interface for an example.
    - edgefactory.py:
        * EdgeFactory(): Settings are not defined
        Is this working outside OpenAlea ('UI, 'EdgeStyle')?
    - baselisteners.py
        * Depends on openalea.observer: remove it or use a local copy.
        * The code is not sufficiently autoexplanatory (BlackBox)
        * set_graph, graph: use property instead
        * notify: you have to explain very clearly the possible events.
        * GraphListenerBase.registerstrategy:
            Separate registration and check. The check has to be done
            by the caller. 
        * to continue...
    - qtgraphview.py:
        *why renaming the functions (WEAKREFref and so on) rather than ref or weakref.ref). It is awfull. 
        * __AIK__? why not __AP_IN_KE__ its much more readable.
        => replace by __keys (low case with just trailing _.
            
     


23/10/2009 : First experimental version of the refactor GraphEditor
===================================================================
This check-in sets the basic structure for a more flexible graph editor.
Beware, these are the early stages, names are very likely to change.
I use a painter metaphore to describe the system.
* The graph is the subject of the painter, it is a talkative graph.
* The painter evolves from just a listener of what the graph says, to a
painter with a canvas, to a painter with hands.
* The client who has the power of transforming the painter into a
sculpturer who will sculpt the talkative graph.

This metaphore is implemented in several classes.
* Generic modules : gengraphview and gengraphview_interfaces. 
Implements the basic signal dispatching system from the model. 
It's the painter without hands nor canvas.
* Qt specifialisation of the above : qtgraphview. Knows that it should paint
on a QGraphicsScene but not how. It's the painter with the canvas but no hand.
* dataflowview is a reimplementation of openalea's dataflow editor with the
new framework. The goal is a one-to-one match. This provides the painter with
hands to paint on the canvas and tools to interact with the graph.
This is the part that the user can customize.
